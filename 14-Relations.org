#+TITLE: Relations
#+AUTHOR: Nathan Moos
#+DATE: 2015-11-05
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \newcommand*\R{\mathbb{R}}
#+LATEX_HEADER: \newcommand*\Z{\mathbb{Z}}
#+LATEX_HEADER: \newcommand*\union{\cup}
#+LATEX_HEADER: \newcommand*\intersection{\cap}

* Definition

Let $A$ and $B$ be sets.
$$ A \times B = \{ (a, b) | a \in A, b \in B \} $$

A relation from $A$ to $B$ is a subset of $A \times $B$.
$$ R \subset A \times B $$

\begin{align*}
R(a, b) &\iff (a, b) \in R \\
\cancel{R}(a, b) &\iff (a, b) \not\in R
\end{align*}

A relation is *not necessarily* a function.

* Combining relations

Let $R_1$ and $R_2$ be two relations from $A$ to $B$. 

We can form:
- Unions
- Intersections
- Differences
- Complement
- Exclusive OR

** Composition
   
Given $R \subseteq A \times B$ and $S \subseteq B \times C$, the composition of
$R$ and $S$ is:

$$ S \odot R = \{ (a, c) | \exists (a, b) \in R \land (b, c) \in S \} \subseteq A \times C $$

** Exponentiation

Definitions:
\begin{align*}
R^1 &= R \\
R^{n+1} &= R^n \odot R
\end{align*}
** Transitive Closure/Connectivity
   
$$ R^* = \union_{k=1}^n R^k $$

*** Warshall's Algorithm

Define $n$ x $n$ boolean matrices.
Let
\begin{align*}
W_0 &= M_R \\
W_k &= [ w_{ij}^k ] \\
w_{ij}^k = 1 &\iff \exists \text{a path from $i$ to $j$ whose interior vertices
include } \{ v_1, ..., v_k \} \\
w_{ij}^k &= w_{ij}^{k-1} \lor (w_{ik}^{k-1} \land w_{kj}^{k-1})
\end{align*}

* Properties on relations between elements of the same set

- Reflexive :: $\forall x R(x, x)$
- Irreflexive :: $\lnot \exists x R(x, x)$
- Symmetric :: $\forall (x, y) R(x, y) \iff R(y, x)$
- Antisymmetric :: $\forall (x, y) (R(x, y) \land R(y, x)) \implies x = y$
- Transitive :: $\forall (x, y, z) (R(x, y) \land R(y, z)) \implies R(x, z)$

** Warnings

- The phrase /antisymmetric/ does *not* mean "not symmetric".
- The phrase /asymmetric/ is *not* equivalent to "not symmetric" either!
- The phrase /irreflexive/ does *not* mean "not reflexive".
* Representation

- Bipartite graph representation 
- Set representation 
  
** Matrix representation

Assume $A$ and $B$ are finite relations. There is a matrix $M_R = [ m_{ij} ]$
that holds the following:
$$ m_{ij} = 1 \text{ if } (a_i, b_j) \in \R $$

*** Composition

Composition of relations in matrix form simply becomes the product of the two
matrices.

When working with booleans, replace multiplication with $\land$ and addition
with $\lor$.

* Databases
  *All databases are simply relations*
  
** Select
   
Given a table, select rows that match a condition.

** Projection
   
Given a table, select a subset of columns.

** Join
   
Given $n$ tables, fetch columns from each table, joining on certain keys.
* Equivalence relations
  
$R$ is an /equivalence relation/ if it is
- Reflexive
- Symmetric
- Transitive
  
** Equivalence classes

An equivalence class is the set of all numbers that will yield the same value on
a relation.

* Partial orderings 
  
$R$ is a /partial ordering/ if it is
- Reflexive
- Antisymmetric
- Transitive

$a, b \in S$ are /comparable/ if $(a, b) \in R$ or $(b, a) \in R$.

If /every pair of elements/ in $S$ is comparable, then $(S, R)$ is /totally
ordered/.

* Hasse Diagrams
  
- Purpose :: to represent partially-ordered sets

Properties:
- Write a relation as a directed graph with all arrows pointing up
- Remove all self-loops
- Remove all edges that transitivity implies
- Remove all arrows
